From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: iris <60985521+KaiAF@users.noreply.github.com>
Date: Fri, 7 Jul 2023 11:25:49 -0500
Subject: [PATCH] Add BlockInventoryEvent


diff --git a/src/main/java/io/papermc/paper/event/block/BlockInventoryEvent.java b/src/main/java/io/papermc/paper/event/block/BlockInventoryEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..3c925d1da64e73bf77b1610e1bd0d6f6d4400abb
--- /dev/null
+++ b/src/main/java/io/papermc/paper/event/block/BlockInventoryEvent.java
@@ -0,0 +1,94 @@
+package io.papermc.paper.event.block;
+
+import org.bukkit.block.Block;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.block.BlockEvent;
+import org.jetbrains.annotations.NotNull;
+
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.entity.Player;
+
+/**
+ * Called when the block's inventory has been interacted with.
+ */
+public class BlockInventoryEvent extends BlockEvent implements Cancellable {
+    private static final HandlerList handlers = new HandlerList();
+    private Player player;
+    private Block theBlock;
+    private ItemStack item;
+    private int slot;
+    private boolean isRemoved;
+    private boolean cancelled;
+
+    /**
+     *
+     * @param player
+     * @param blockEntity
+     * @param stack
+     * @param slot
+     * @param isRemoved
+     */
+    public BlockInventoryEvent(Player player, Block blockEntity, ItemStack stack, int slot, boolean isRemoved) {
+        super(blockEntity);
+        this.player = player;
+        this.theBlock = blockEntity;
+        this.item = stack;
+        this.slot = slot;
+        this.isRemoved = isRemoved;
+    }
+
+    /**
+     * The player that interacted with the inventory
+     * @return the player
+     */
+    public Player getPlayer() {
+        return player;
+    }
+
+    /**
+     * @return the item that was taken / added
+     */
+    public ItemStack getItem() {
+        return item;
+    }
+
+    /**
+     * @return the slot
+     */
+    public Integer getSlot() {
+        return slot;
+    }
+
+    /**
+     * @return true if the item was removed from the inventory
+     */
+    public boolean isRemoved() {
+        return isRemoved;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    /**
+     * Cancel this event.
+     * @param cancel true if you wish to cancel this event
+     */
+    @Override
+    public void setCancelled(boolean cancel) {
+        cancelled = cancel;
+    }
+
+    @Override
+    public @NotNull
+    HandlerList getHandlers() {
+        return handlers;
+    }
+
+    public static @NotNull
+    HandlerList getHandlerList() {
+        return handlers;
+    }
+}
